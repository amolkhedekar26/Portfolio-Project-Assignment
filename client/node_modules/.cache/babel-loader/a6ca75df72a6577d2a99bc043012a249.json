{"ast":null,"code":"var _jsxFileName = \"/home/amol/Submit On/client/src/pages/Projects/Projects.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Projects.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProjects, createProject } from \"../../actions/projects\";\nimport { getSkills } from \"../../actions/skills\";\nimport ProjectsHeader from \"./components/ProjectsHeader\";\nimport ProjectsContent from \"./components/ProjectsContent\";\nimport ProjectsListHolder from \"./components/ProjectsListHolder\";\nimport AddProjectModal from \"./components/AddProjectModal\";\nimport ProjectsConainer from \"./components/ProjectsConainer\";\nimport { ToastContainer, notify } from \"../../utils/toast\";\nimport ProjectsValidator from \"../../validation/Projects\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Projects(props) {\n  _s();\n\n  const initialState = {\n    inputSearch: \"\"\n  };\n  const initialStateModalForm = {\n    inputProjectSkills: []\n  };\n  let navigate = useNavigate();\n  const {\n    user: currentUser\n  } = useSelector(state => state.auth);\n  const [stateModalForm, setStateModalForm] = useState(initialStateModalForm);\n  const [isOpen, setOpen] = useState(false);\n  const projects = useSelector(state => state.projects);\n  const skills = useSelector(state => state.skills);\n  const dispatch = useDispatch();\n  const inputRef = useRef({});\n  useEffect(() => {\n    if (!currentUser) {\n      navigate(\"/login\");\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    dispatch(getProjects());\n    dispatch(getSkills());\n  }, []);\n\n  const skillSelected = (selectedList, selectedItem) => {\n    const arr = stateModalForm.inputProjectSkills;\n\n    if (selectedList.length > 0) {\n      for (let i = 0; i < selectedList.length; i++) {\n        if (!arr.includes(selectedList[i])) {\n          arr.push(selectedList[i]);\n        }\n      }\n    } else if (selectedItem) {\n      if (!arr.includes(selectedItem)) {\n        arr.push(selectedItem);\n      }\n    }\n\n    setStateModalForm({\n      inputProjectSkills: arr\n    });\n  };\n\n  const skillRemoved = (selectedList, removedItem) => {\n    setStateModalForm({\n      inputProjectSkills: selectedList\n    });\n  };\n\n  const trimData = data => {\n    const {\n      name,\n      description\n    } = data;\n    return {\n      name: name.trim(),\n      description: description.trim()\n    };\n  };\n\n  function handleSave(e) {\n    e.preventDefault();\n    let trimmedData = trimData({\n      name: inputRef.current.inputProjectName.value,\n      description: inputRef.current.inputProjectDescription.value\n    });\n    trimmedData.skills = stateModalForm.inputProjectSkills;\n    const isValid = ProjectsValidator.validate(trimmedData, notify, setOpen);\n\n    if (isValid) {\n      dispatch(createProject({\n        project: {\n          name: trimmedData.name,\n          description: trimmedData.description,\n          skills: trimmedData.skills\n        }\n      }, notify, setOpen));\n      setStateModalForm({\n        inputProjectSkills: []\n      });\n      setTimeout(() => {\n        dispatch(getProjects());\n      }, 1000); // setOpen(false);\n    }\n  }\n\n  const [isSearchActive, setIsSearchActive] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(ProjectsConainer, {\n    children: [/*#__PURE__*/_jsxDEV(ProjectsHeader, {\n      projectsArr: projects,\n      modalToggler: () => setOpen(!isOpen),\n      isSearchActive: isSearchActive,\n      setIsSearchActive: setIsSearchActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProjectsContent, {\n      isSearchActive: isSearchActive,\n      children: [projects && /*#__PURE__*/_jsxDEV(ProjectsListHolder, {\n        projects: projects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddProjectModal, {\n        isOpen: isOpen,\n        setOpen: setOpen,\n        inputRef: inputRef,\n        skills: skills,\n        stateModalForm: stateModalForm,\n        skillSelected: skillSelected,\n        skillRemoved: skillRemoved,\n        handleSave: handleSave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Projects, \"sqWSW9lyA7Yx8BJbAgFa2FpuzF8=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useDispatch","useSelector","getProjects","createProject","getSkills","ProjectsHeader","ProjectsContent","ProjectsListHolder","AddProjectModal","ProjectsConainer","ToastContainer","notify","ProjectsValidator","Projects","props","initialState","inputSearch","initialStateModalForm","inputProjectSkills","navigate","user","currentUser","state","auth","stateModalForm","setStateModalForm","isOpen","setOpen","projects","skills","dispatch","inputRef","skillSelected","selectedList","selectedItem","arr","length","i","includes","push","skillRemoved","removedItem","trimData","data","name","description","trim","handleSave","e","preventDefault","trimmedData","current","inputProjectName","value","inputProjectDescription","isValid","validate","project","setTimeout","isSearchActive","setIsSearchActive"],"sources":["/home/amol/Submit On/client/src/pages/Projects/Projects.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Projects.css\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProjects, createProject } from \"../../actions/projects\";\nimport { getSkills } from \"../../actions/skills\";\n\n\nimport ProjectsHeader from \"./components/ProjectsHeader\";\nimport ProjectsContent from \"./components/ProjectsContent\";\nimport ProjectsListHolder from \"./components/ProjectsListHolder\";\nimport AddProjectModal from \"./components/AddProjectModal\";\nimport ProjectsConainer from \"./components/ProjectsConainer\";\nimport { ToastContainer, notify } from \"../../utils/toast\";\nimport ProjectsValidator from \"../../validation/Projects\";\n\nfunction Projects(props) {\n  const initialState = {\n    inputSearch: \"\",\n  };\n\n  const initialStateModalForm = {\n    inputProjectSkills: [],\n  };\n\n  let navigate = useNavigate();\n\n  const { user: currentUser } = useSelector((state) => state.auth);\n\n  const [stateModalForm, setStateModalForm] = useState(initialStateModalForm);\n  const [isOpen, setOpen] = useState(false);\n  \n\n  const projects = useSelector((state) => state.projects);\n  const skills = useSelector((state) => state.skills);\n  const dispatch = useDispatch();\n\n  const inputRef = useRef({});\n\n  useEffect(() => {\n    if (!currentUser) {\n      navigate(\"/login\");\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    dispatch(getProjects());\n    dispatch(getSkills());\n  }, []);\n\n  const skillSelected = (selectedList, selectedItem) => {\n    const arr = stateModalForm.inputProjectSkills;\n    if (selectedList.length > 0) {\n      for (let i = 0; i < selectedList.length; i++) {\n        if (!arr.includes(selectedList[i])) {\n          arr.push(selectedList[i]);\n        }\n      }\n    } else if (selectedItem) {\n      if (!arr.includes(selectedItem)) {\n        arr.push(selectedItem);\n      }\n    }\n    setStateModalForm({\n      inputProjectSkills: arr,\n    });\n  };\n  const skillRemoved = (selectedList, removedItem) => {\n    setStateModalForm({\n      inputProjectSkills: selectedList,\n    });\n  };\n\n  const trimData = (data) => {\n    const { name, description } = data;\n    return { name: name.trim(), description: description.trim() };\n  };\n\n  function handleSave(e) {\n    e.preventDefault();\n    let trimmedData = trimData({\n      name: inputRef.current.inputProjectName.value,\n      description: inputRef.current.inputProjectDescription.value,\n    });\n    trimmedData.skills = stateModalForm.inputProjectSkills;\n    const isValid = ProjectsValidator.validate(trimmedData, notify, setOpen);\n    if (isValid) {\n      dispatch(\n        createProject(\n          {\n            project: {\n              name: trimmedData.name,\n              description: trimmedData.description,\n              skills: trimmedData.skills,\n            },\n          },\n          notify,\n          setOpen\n        )\n      );\n      setStateModalForm({\n        inputProjectSkills: [],\n      });\n      setTimeout(() => {\n        dispatch(getProjects());\n      }, 1000);\n      // setOpen(false);\n    }\n  }\n\n  const [isSearchActive, setIsSearchActive] = React.useState(false);\n\n  return (\n    <ProjectsConainer>\n      <ProjectsHeader\n        projectsArr={projects}\n        modalToggler={() => setOpen(!isOpen)}\n        isSearchActive={isSearchActive}\n        setIsSearchActive={setIsSearchActive}\n      />\n      <ProjectsContent isSearchActive={isSearchActive}>\n        {projects && (\n          <ProjectsListHolder\n            projects={projects}\n          />\n        )}\n\n        <AddProjectModal\n          isOpen={isOpen}\n          setOpen={setOpen}\n          inputRef={inputRef}\n          skills={skills}\n          stateModalForm={stateModalForm}\n          skillSelected={skillSelected}\n          skillRemoved={skillRemoved}\n          handleSave={handleSave}\n        />\n        <ToastContainer />\n      </ProjectsContent>\n    </ProjectsConainer>\n  );\n}\n\nexport default Projects;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,gBAAP;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,wBAA3C;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAGA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,mBAAvC;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EACvB,MAAMC,YAAY,GAAG;IACnBC,WAAW,EAAE;EADM,CAArB;EAIA,MAAMC,qBAAqB,GAAG;IAC5BC,kBAAkB,EAAE;EADQ,CAA9B;EAIA,IAAIC,QAAQ,GAAGpB,WAAW,EAA1B;EAEA,MAAM;IAAEqB,IAAI,EAAEC;EAAR,IAAwBpB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAzC;EAEA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC7B,QAAQ,CAACqB,qBAAD,CAApD;EACA,MAAM,CAACS,MAAD,EAASC,OAAT,IAAoB/B,QAAQ,CAAC,KAAD,CAAlC;EAGA,MAAMgC,QAAQ,GAAG3B,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACM,QAAlB,CAA5B;EACA,MAAMC,MAAM,GAAG5B,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACO,MAAlB,CAA1B;EACA,MAAMC,QAAQ,GAAG9B,WAAW,EAA5B;EAEA,MAAM+B,QAAQ,GAAGjC,MAAM,CAAC,EAAD,CAAvB;EAEAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACwB,WAAL,EAAkB;MAChBF,QAAQ,CAAC,QAAD,CAAR;IACD;EACF,CAJQ,EAIN,CAACE,WAAD,CAJM,CAAT;EAMAxB,SAAS,CAAC,MAAM;IACdiC,QAAQ,CAAC5B,WAAW,EAAZ,CAAR;IACA4B,QAAQ,CAAC1B,SAAS,EAAV,CAAR;EACD,CAHQ,EAGN,EAHM,CAAT;;EAKA,MAAM4B,aAAa,GAAG,CAACC,YAAD,EAAeC,YAAf,KAAgC;IACpD,MAAMC,GAAG,GAAGX,cAAc,CAACN,kBAA3B;;IACA,IAAIe,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,YAAY,CAACG,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;QAC5C,IAAI,CAACF,GAAG,CAACG,QAAJ,CAAaL,YAAY,CAACI,CAAD,CAAzB,CAAL,EAAoC;UAClCF,GAAG,CAACI,IAAJ,CAASN,YAAY,CAACI,CAAD,CAArB;QACD;MACF;IACF,CAND,MAMO,IAAIH,YAAJ,EAAkB;MACvB,IAAI,CAACC,GAAG,CAACG,QAAJ,CAAaJ,YAAb,CAAL,EAAiC;QAC/BC,GAAG,CAACI,IAAJ,CAASL,YAAT;MACD;IACF;;IACDT,iBAAiB,CAAC;MAChBP,kBAAkB,EAAEiB;IADJ,CAAD,CAAjB;EAGD,CAhBD;;EAiBA,MAAMK,YAAY,GAAG,CAACP,YAAD,EAAeQ,WAAf,KAA+B;IAClDhB,iBAAiB,CAAC;MAChBP,kBAAkB,EAAEe;IADJ,CAAD,CAAjB;EAGD,CAJD;;EAMA,MAAMS,QAAQ,GAAIC,IAAD,IAAU;IACzB,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAwBF,IAA9B;IACA,OAAO;MAAEC,IAAI,EAAEA,IAAI,CAACE,IAAL,EAAR;MAAqBD,WAAW,EAAEA,WAAW,CAACC,IAAZ;IAAlC,CAAP;EACD,CAHD;;EAKA,SAASC,UAAT,CAAoBC,CAApB,EAAuB;IACrBA,CAAC,CAACC,cAAF;IACA,IAAIC,WAAW,GAAGR,QAAQ,CAAC;MACzBE,IAAI,EAAEb,QAAQ,CAACoB,OAAT,CAAiBC,gBAAjB,CAAkCC,KADf;MAEzBR,WAAW,EAAEd,QAAQ,CAACoB,OAAT,CAAiBG,uBAAjB,CAAyCD;IAF7B,CAAD,CAA1B;IAIAH,WAAW,CAACrB,MAAZ,GAAqBL,cAAc,CAACN,kBAApC;IACA,MAAMqC,OAAO,GAAG3C,iBAAiB,CAAC4C,QAAlB,CAA2BN,WAA3B,EAAwCvC,MAAxC,EAAgDgB,OAAhD,CAAhB;;IACA,IAAI4B,OAAJ,EAAa;MACXzB,QAAQ,CACN3B,aAAa,CACX;QACEsD,OAAO,EAAE;UACPb,IAAI,EAAEM,WAAW,CAACN,IADX;UAEPC,WAAW,EAAEK,WAAW,CAACL,WAFlB;UAGPhB,MAAM,EAAEqB,WAAW,CAACrB;QAHb;MADX,CADW,EAQXlB,MARW,EASXgB,OATW,CADP,CAAR;MAaAF,iBAAiB,CAAC;QAChBP,kBAAkB,EAAE;MADJ,CAAD,CAAjB;MAGAwC,UAAU,CAAC,MAAM;QACf5B,QAAQ,CAAC5B,WAAW,EAAZ,CAAR;MACD,CAFS,EAEP,IAFO,CAAV,CAjBW,CAoBX;IACD;EACF;;EAED,MAAM,CAACyD,cAAD,EAAiBC,iBAAjB,IAAsCjE,KAAK,CAACC,QAAN,CAAe,KAAf,CAA5C;EAEA,oBACE,QAAC,gBAAD;IAAA,wBACE,QAAC,cAAD;MACE,WAAW,EAAEgC,QADf;MAEE,YAAY,EAAE,MAAMD,OAAO,CAAC,CAACD,MAAF,CAF7B;MAGE,cAAc,EAAEiC,cAHlB;MAIE,iBAAiB,EAAEC;IAJrB;MAAA;MAAA;MAAA;IAAA,QADF,eAOE,QAAC,eAAD;MAAiB,cAAc,EAAED,cAAjC;MAAA,WACG/B,QAAQ,iBACP,QAAC,kBAAD;QACE,QAAQ,EAAEA;MADZ;QAAA;QAAA;QAAA;MAAA,QAFJ,eAOE,QAAC,eAAD;QACE,MAAM,EAAEF,MADV;QAEE,OAAO,EAAEC,OAFX;QAGE,QAAQ,EAAEI,QAHZ;QAIE,MAAM,EAAEF,MAJV;QAKE,cAAc,EAAEL,cALlB;QAME,aAAa,EAAEQ,aANjB;QAOE,YAAY,EAAEQ,YAPhB;QAQE,UAAU,EAAEO;MARd;QAAA;QAAA;QAAA;MAAA,QAPF,eAiBE,QAAC,cAAD;QAAA;QAAA;QAAA;MAAA,QAjBF;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD;;GA7HQlC,Q;UASQd,W,EAEeE,W,EAMbA,W,EACFA,W,EACED,W;;;KAnBVa,Q;AA+HT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}