{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nimport { notify } from \"../utils/toast\";\nexport const register = (email, password) => dispatch => {\n  return AuthService.register(email, password, notify).then(data => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n\n    if (!data.success) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: data.message\n      });\n      notify(data.message, \"error\");\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password, setHasError, notify) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data.data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n\n    if (!data.success) {\n      if (data.status === 422) {\n        notify(data.message, \"error\");\n      }\n\n      setHasError(true);\n      return Promise.reject(data.message);\n    }\n\n    return Promise.resolve();\n  }, error => {\n    // const message =\n    //   (error.response &&\n    //     error.response.data &&\n    //     error.response.data.message) ||\n    //   error.message ||\n    //   error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: error.message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","notify","register","email","password","dispatch","then","data","type","success","payload","message","Promise","reject","resolve","error","response","toString","login","setHasError","user","status","logout"],"sources":["/home/amol/Downloads/frontend/portfolio/src/actions/auth.js"],"sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\nimport { notify } from \"../utils/toast\";\n\nexport const register = (email, password) => (dispatch) => {\n  return AuthService.register(email, password, notify).then(\n    (data) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      if (!data.success) {\n        dispatch({\n          type: REGISTER_FAIL,\n          payload: data.message,\n        });\n        notify(data.message, \"error\");\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password, setHasError,notify) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data.data },\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: data.message,\n      });\n      if (!data.success) {\n        if(data.status === 422){\n          notify(data.message, \"error\");\n        }\n        setHasError(true);\n        return Promise.reject(data.message);\n      }\n      return Promise.resolve();\n    },\n    (error) => {\n      // const message =\n      //   (error.response &&\n      //     error.response.data &&\n      //     error.response.data.message) ||\n      //   error.message ||\n      //   error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: error.message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;EACzD,OAAOL,WAAW,CAACE,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCH,MAAtC,EAA8CK,IAA9C,CACJC,IAAD,IAAU;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAEd;IADC,CAAD,CAAR;;IAIA,IAAI,CAACa,IAAI,CAACE,OAAV,EAAmB;MACjBJ,QAAQ,CAAC;QACPG,IAAI,EAAEb,aADC;QAEPe,OAAO,EAAEH,IAAI,CAACI;MAFP,CAAD,CAAR;MAIAV,MAAM,CAACM,IAAI,CAACI,OAAN,EAAe,OAAf,CAAN;MACA,OAAOC,OAAO,CAACC,MAAR,EAAP;IACD;;IACD,OAAOD,OAAO,CAACE,OAAR,EAAP;EACD,CAfI,EAgBJC,KAAD,IAAW;IACT,MAAMJ,OAAO,GACVI,KAAK,CAACC,QAAN,IACCD,KAAK,CAACC,QAAN,CAAeT,IADhB,IAECQ,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBI,OAFtB,IAGAI,KAAK,CAACJ,OAHN,IAIAI,KAAK,CAACE,QAAN,EALF;IAOAZ,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAIAU,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPW,OAAO,EAAEC;IAFF,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACC,MAAR,EAAP;EACD,CAlCI,CAAP;AAoCD,CArCM;AAuCP,OAAO,MAAMK,KAAK,GAAG,CAACf,KAAD,EAAQC,QAAR,EAAkBe,WAAlB,EAA8BlB,MAA9B,KAA0CI,QAAD,IAAc;EAC1E,OAAOL,WAAW,CAACkB,KAAZ,CAAkBf,KAAlB,EAAyBC,QAAzB,EAAmCE,IAAnC,CACJC,IAAD,IAAU;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAEZ,aADC;MAEPc,OAAO,EAAE;QAAEU,IAAI,EAAEb,IAAI,CAACA;MAAb;IAFF,CAAD,CAAR;IAKAF,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPW,OAAO,EAAEH,IAAI,CAACI;IAFP,CAAD,CAAR;;IAIA,IAAI,CAACJ,IAAI,CAACE,OAAV,EAAmB;MACjB,IAAGF,IAAI,CAACc,MAAL,KAAgB,GAAnB,EAAuB;QACrBpB,MAAM,CAACM,IAAI,CAACI,OAAN,EAAe,OAAf,CAAN;MACD;;MACDQ,WAAW,CAAC,IAAD,CAAX;MACA,OAAOP,OAAO,CAACC,MAAR,CAAeN,IAAI,CAACI,OAApB,CAAP;IACD;;IACD,OAAOC,OAAO,CAACE,OAAR,EAAP;EACD,CAnBI,EAoBJC,KAAD,IAAW;IACT;IACA;IACA;IACA;IACA;IACA;IAEAV,QAAQ,CAAC;MACPG,IAAI,EAAEX;IADC,CAAD,CAAR;IAIAQ,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPW,OAAO,EAAEK,KAAK,CAACJ;IAFR,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACC,MAAR,EAAP;EACD,CAtCI,CAAP;AAwCD,CAzCM;AA2CP,OAAO,MAAMS,MAAM,GAAG,MAAOjB,QAAD,IAAc;EACxCL,WAAW,CAACsB,MAAZ;EAEAjB,QAAQ,CAAC;IACPG,IAAI,EAAEV;EADC,CAAD,CAAR;AAGD,CANM"},"metadata":{},"sourceType":"module"}