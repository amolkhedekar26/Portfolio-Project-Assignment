{"ast":null,"code":"const validPassword = password => {\n  return String(password).match(new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"));\n};\n\nconst matchPasswords = (password, reEnterPassword) => {\n  return password === reEnterPassword;\n};\n\nconst validate = (data, notify) => {\n  const {\n    password,\n    reEnterPassword\n  } = data;\n\n  if (!password || password === \"\") {\n    notify(\"Password is required\", \"error\");\n    return false;\n  } else if (!validPassword(password)) {\n    notify(\"Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character\", \"error\");\n    return false;\n  } else if (!reEnterPassword || reEnterPassword === \"\") {\n    notify(\"Re-enter password is required\", \"error\");\n    return false;\n  } else if (!matchPasswords(password, reEnterPassword)) {\n    notify(\"Passwords do not match\", \"error\");\n    return false;\n  }\n\n  return true;\n};\n\nexport default {\n  validate\n};","map":{"version":3,"names":["validPassword","password","String","match","RegExp","matchPasswords","reEnterPassword","validate","data","notify"],"sources":["/home/amol/Submit On/client/src/validation/ResetPassword.js"],"sourcesContent":["const validPassword = (password) => {\n  return String(password).match(\n    new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\")\n  );\n};\n\nconst matchPasswords = (password, reEnterPassword) => {\n  return password === reEnterPassword;\n};\n\nconst validate = (data, notify) => {\n  const { password, reEnterPassword } = data;\n\n  if (!password || password === \"\") {\n    notify(\"Password is required\", \"error\");\n    return false;\n  } else if (!validPassword(password)) {\n    notify(\n      \"Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character\",\n      \"error\"\n    );\n    return false;\n  } else if (!reEnterPassword || reEnterPassword === \"\") {\n    notify(\"Re-enter password is required\", \"error\");\n    return false;\n  } else if (!matchPasswords(password, reEnterPassword)) {\n    notify(\"Passwords do not match\", \"error\");\n    return false;\n  }\n  return true;\n};\n\nexport default {\n  validate,\n};\n"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,QAAD,IAAc;EAClC,OAAOC,MAAM,CAACD,QAAD,CAAN,CAAiBE,KAAjB,CACL,IAAIC,MAAJ,CAAW,6DAAX,CADK,CAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAG,CAACJ,QAAD,EAAWK,eAAX,KAA+B;EACpD,OAAOL,QAAQ,KAAKK,eAApB;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;EACjC,MAAM;IAAER,QAAF;IAAYK;EAAZ,IAAgCE,IAAtC;;EAEA,IAAI,CAACP,QAAD,IAAaA,QAAQ,KAAK,EAA9B,EAAkC;IAChCQ,MAAM,CAAC,sBAAD,EAAyB,OAAzB,CAAN;IACA,OAAO,KAAP;EACD,CAHD,MAGO,IAAI,CAACT,aAAa,CAACC,QAAD,CAAlB,EAA8B;IACnCQ,MAAM,CACJ,iHADI,EAEJ,OAFI,CAAN;IAIA,OAAO,KAAP;EACD,CANM,MAMA,IAAI,CAACH,eAAD,IAAoBA,eAAe,KAAK,EAA5C,EAAgD;IACrDG,MAAM,CAAC,+BAAD,EAAkC,OAAlC,CAAN;IACA,OAAO,KAAP;EACD,CAHM,MAGA,IAAI,CAACJ,cAAc,CAACJ,QAAD,EAAWK,eAAX,CAAnB,EAAgD;IACrDG,MAAM,CAAC,wBAAD,EAA2B,OAA3B,CAAN;IACA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD,CApBD;;AAsBA,eAAe;EACbF;AADa,CAAf"},"metadata":{},"sourceType":"module"}