{"ast":null,"code":"const validEmail = email => {\n  return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\nconst validPassword = password => {\n  return String(password).toLowerCase().match(new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"));\n};\n\nconst matchPasswords = (password, confirmPassword) => {\n  return password === confirmPassword;\n};\n\nconst validate = (data, notify) => {\n  const {\n    email,\n    password,\n    confirmPassword\n  } = data;\n\n  if (!email || email === \"\") {\n    notify(\"Email is required\", \"error\");\n    return false;\n  } else if (!validEmail(email)) {\n    notify(\"Email is invalid\", \"error\");\n    return false;\n  }\n\n  if (!password || password === \"\") {\n    notify(\"Password is required\", \"error\");\n    return false;\n  }\n\n  if (!validPassword(password)) {\n    notify(\"Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character\", \"error\");\n    return false;\n  }\n\n  if (!confirmPassword || confirmPassword === \"\") {\n    notify(\"Confirm password is required\", \"error\");\n    return false;\n  }\n\n  if (password && confirmPassword) {}\n\n  return true;\n};\n\nexport default {\n  validate\n};","map":{"version":3,"names":["validEmail","email","String","toLowerCase","match","validPassword","password","RegExp","matchPasswords","confirmPassword","validate","data","notify"],"sources":["/home/amol/Downloads/frontend/portfolio/src/validation/SignUp.js"],"sourcesContent":["const validEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n\nconst validPassword = (password) => {\n  return String(password)\n    .toLowerCase()\n    .match(\n      new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\")\n    );\n};\n\nconst matchPasswords = (password, confirmPassword) => {\n  return password === confirmPassword;\n};\n\nconst validate = (data, notify) => {\n  const { email, password, confirmPassword } = data;\n  if (!email || email === \"\") {\n    notify(\"Email is required\", \"error\");\n    return false;\n  }\n  else if (!validEmail(email)) {\n    notify(\"Email is invalid\", \"error\");\n    return false;\n  }\n  if (!password || password === \"\") {\n    notify(\"Password is required\", \"error\");\n    return false;\n  }\n  if (!validPassword(password)) {\n    notify(\n      \"Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character\",\n      \"error\"\n    );\n    return false;\n  }\n  if (!confirmPassword || confirmPassword === \"\") {\n    notify(\"Confirm password is required\", \"error\");\n    return false;\n  }\n  if(password && confirmPassword){}\n\n  return true;\n};\n\nexport default {\n  validate,\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,KAAD,IAAW;EAC5B,OAAOC,MAAM,CAACD,KAAD,CAAN,CACJE,WADI,GAEJC,KAFI,CAGH,uJAHG,CAAP;AAKD,CAND;;AAQA,MAAMC,aAAa,GAAIC,QAAD,IAAc;EAClC,OAAOJ,MAAM,CAACI,QAAD,CAAN,CACJH,WADI,GAEJC,KAFI,CAGH,IAAIG,MAAJ,CAAW,6DAAX,CAHG,CAAP;AAKD,CAND;;AAQA,MAAMC,cAAc,GAAG,CAACF,QAAD,EAAWG,eAAX,KAA+B;EACpD,OAAOH,QAAQ,KAAKG,eAApB;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;EACjC,MAAM;IAAEX,KAAF;IAASK,QAAT;IAAmBG;EAAnB,IAAuCE,IAA7C;;EACA,IAAI,CAACV,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B;IAC1BW,MAAM,CAAC,mBAAD,EAAsB,OAAtB,CAAN;IACA,OAAO,KAAP;EACD,CAHD,MAIK,IAAI,CAACZ,UAAU,CAACC,KAAD,CAAf,EAAwB;IAC3BW,MAAM,CAAC,kBAAD,EAAqB,OAArB,CAAN;IACA,OAAO,KAAP;EACD;;EACD,IAAI,CAACN,QAAD,IAAaA,QAAQ,KAAK,EAA9B,EAAkC;IAChCM,MAAM,CAAC,sBAAD,EAAyB,OAAzB,CAAN;IACA,OAAO,KAAP;EACD;;EACD,IAAI,CAACP,aAAa,CAACC,QAAD,CAAlB,EAA8B;IAC5BM,MAAM,CACJ,iHADI,EAEJ,OAFI,CAAN;IAIA,OAAO,KAAP;EACD;;EACD,IAAI,CAACH,eAAD,IAAoBA,eAAe,KAAK,EAA5C,EAAgD;IAC9CG,MAAM,CAAC,8BAAD,EAAiC,OAAjC,CAAN;IACA,OAAO,KAAP;EACD;;EACD,IAAGN,QAAQ,IAAIG,eAAf,EAA+B,CAAE;;EAEjC,OAAO,IAAP;AACD,CA5BD;;AA8BA,eAAe;EACbC;AADa,CAAf"},"metadata":{},"sourceType":"module"}