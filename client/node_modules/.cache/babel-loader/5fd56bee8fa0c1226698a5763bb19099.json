{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (email, password) => dispatch => {\n  return AuthService.register(email, password).then(data => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n\n    if (!data.success) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: data.message\n      });\n    }\n\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password, setHasError) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data.data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n\n    if (!data.success) {\n      setHasError(true);\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  }, error => {\n    // const message =\n    //   (error.response &&\n    //     error.response.data &&\n    //     error.response.data.message) ||\n    //   error.message ||\n    //   error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: error.message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","email","password","dispatch","then","data","type","payload","response","message","success","Promise","resolve","error","toString","reject","login","setHasError","user","logout"],"sources":["/home/amol/Downloads/frontend/portfolio/src/actions/auth.js"],"sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (email, password) => (dispatch) => {\n  return AuthService.register(email, password).then(\n    (data) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n      if (!data.success) {\n        dispatch({\n          type: REGISTER_FAIL,\n          payload: data.message,\n        });\n      }\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password, setHasError) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data.data },\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: data.message,\n      });\n      if (!data.success) {\n        setHasError(true);\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    (error) => {\n      // const message =\n      //   (error.response &&\n      //     error.response.data &&\n      //     error.response.data.message) ||\n      //   error.message ||\n      //   error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: error.message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;EACzD,OAAOJ,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACJC,IAAD,IAAU;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAIAU,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEC,QAAQ,CAACH,IAAT,CAAcI;IAFhB,CAAD,CAAR;;IAIA,IAAI,CAACJ,IAAI,CAACK,OAAV,EAAmB;MACjBP,QAAQ,CAAC;QACPG,IAAI,EAAEZ,aADC;QAEPa,OAAO,EAAEF,IAAI,CAACI;MAFP,CAAD,CAAR;IAID;;IACD,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD,CAjBI,EAkBJC,KAAD,IAAW;IACT,MAAMJ,OAAO,GACVI,KAAK,CAACL,QAAN,IACCK,KAAK,CAACL,QAAN,CAAeH,IADhB,IAECQ,KAAK,CAACL,QAAN,CAAeH,IAAf,CAAoBI,OAFtB,IAGAI,KAAK,CAACJ,OAHN,IAIAI,KAAK,CAACC,QAAN,EALF;IAOAX,QAAQ,CAAC;MACPG,IAAI,EAAEZ;IADC,CAAD,CAAR;IAIAS,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEE;IAFF,CAAD,CAAR;IAKA,OAAOE,OAAO,CAACI,MAAR,EAAP;EACD,CApCI,CAAP;AAsCD,CAvCM;AAyCP,OAAO,MAAMC,KAAK,GAAG,CAACf,KAAD,EAAQC,QAAR,EAAkBe,WAAlB,KAAmCd,QAAD,IAAc;EACnE,OAAOJ,WAAW,CAACiB,KAAZ,CAAkBf,KAAlB,EAAyBC,QAAzB,EAAmCE,IAAnC,CACJC,IAAD,IAAU;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAEX,aADC;MAEPY,OAAO,EAAE;QAAEW,IAAI,EAAEb,IAAI,CAACA;MAAb;IAFF,CAAD,CAAR;IAKAF,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEF,IAAI,CAACI;IAFP,CAAD,CAAR;;IAIA,IAAI,CAACJ,IAAI,CAACK,OAAV,EAAmB;MACjBO,WAAW,CAAC,IAAD,CAAX;MACA,OAAON,OAAO,CAACI,MAAR,EAAP;IACD;;IACD,OAAOJ,OAAO,CAACC,OAAR,EAAP;EACD,CAhBI,EAiBJC,KAAD,IAAW;IACT;IACA;IACA;IACA;IACA;IACA;IAEAV,QAAQ,CAAC;MACPG,IAAI,EAAEV;IADC,CAAD,CAAR;IAIAO,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEM,KAAK,CAACJ;IAFR,CAAD,CAAR;IAKA,OAAOE,OAAO,CAACI,MAAR,EAAP;EACD,CAnCI,CAAP;AAqCD,CAtCM;AAwCP,OAAO,MAAMI,MAAM,GAAG,MAAOhB,QAAD,IAAc;EACxCJ,WAAW,CAACoB,MAAZ;EAEAhB,QAAQ,CAAC;IACPG,IAAI,EAAET;EADC,CAAD,CAAR;AAGD,CANM"},"metadata":{},"sourceType":"module"}