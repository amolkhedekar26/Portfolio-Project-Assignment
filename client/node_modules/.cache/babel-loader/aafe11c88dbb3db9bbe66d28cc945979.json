{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (email, password) => dispatch => {\n  return AuthService.register(email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    console.log(data);\n\n    if (data.success) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          user: data.data,\n          resData: data.data\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: {\n          resData: data.data\n        }\n      });\n    } // dispatch({\n    //   type: SET_MESSAGE,\n    //   payload: data.message,\n    // });\n\n\n    return Promise.resolve();\n  }, error => {\n    // const message =\n    //   (error.response &&\n    //     error.response.data &&\n    //     error.response.data.message) ||\n    //   error.message ||\n    //   error.toString();\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: {\n        resData: error.data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: error.message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","console","log","success","user","resData","logout"],"sources":["/home/amol/Downloads/frontend/portfolio/src/actions/auth.js"],"sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (email, password) => (dispatch) => {\n  return AuthService.register(email, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      console.log(data);\n      if (data.success) {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: { user: data.data, resData: data.data },\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAIL,\n          payload: { resData: data.data },\n        });\n      }\n      // dispatch({\n      //   type: SET_MESSAGE,\n      //   payload: data.message,\n      // });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      // const message =\n      //   (error.response &&\n      //     error.response.data &&\n      //     error.response.data.message) ||\n      //   error.message ||\n      //   error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: { resData: error.data },\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: error.message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;EACzD,OAAOJ,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACJC,QAAD,IAAc;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAIAU,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFhB,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD,CAZI,EAaJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAOAV,QAAQ,CAAC;MACPG,IAAI,EAAEZ;IADC,CAAD,CAAR;IAIAS,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEE;IAFF,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CA/BI,CAAP;AAiCD,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAACd,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;EACtD,OAAOJ,WAAW,CAACgB,KAAZ,CAAkBd,KAAlB,EAAyBC,QAAzB,EAAmCE,IAAnC,CACJI,IAAD,IAAU;IACRQ,OAAO,CAACC,GAAR,CAAYT,IAAZ;;IACA,IAAIA,IAAI,CAACU,OAAT,EAAkB;MAChBf,QAAQ,CAAC;QACPG,IAAI,EAAEX,aADC;QAEPY,OAAO,EAAE;UAAEY,IAAI,EAAEX,IAAI,CAACA,IAAb;UAAmBY,OAAO,EAAEZ,IAAI,CAACA;QAAjC;MAFF,CAAD,CAAR;IAID,CALD,MAKO;MACLL,QAAQ,CAAC;QACPG,IAAI,EAAEV,UADC;QAEPW,OAAO,EAAE;UAAEa,OAAO,EAAEZ,IAAI,CAACA;QAAhB;MAFF,CAAD,CAAR;IAID,CAZO,CAaR;IACA;IACA;IACA;;;IAEA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD,CApBI,EAqBJC,KAAD,IAAW;IACT;IACA;IACA;IACA;IACA;IACA;IAEAT,QAAQ,CAAC;MACPG,IAAI,EAAEV,UADC;MAEPW,OAAO,EAAE;QAAEa,OAAO,EAAER,KAAK,CAACJ;MAAjB;IAFF,CAAD,CAAR;IAKAL,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEK,KAAK,CAACH;IAFR,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CAxCI,CAAP;AA0CD,CA3CM;AA6CP,OAAO,MAAMO,MAAM,GAAG,MAAOlB,QAAD,IAAc;EACxCJ,WAAW,CAACsB,MAAZ;EAEAlB,QAAQ,CAAC;IACPG,IAAI,EAAET;EADC,CAAD,CAAR;AAGD,CANM"},"metadata":{},"sourceType":"module"}